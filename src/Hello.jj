PARSER_BEGIN(Hello)

import java.io.StringReader;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

public class Hello {
  
    public static void main(String[] args) throws Exception {
      StringReader in=new StringReader("DEBUT INTERFACE COMP FenP : Fenetre ; PROP Position, Var : Boolean ; Position2, Var2 : int ; EVT Drag {if Position = False then Position := 5} Click {if Position = True then Position := 8 } COMP FenPP : Fenetre (papa) ; PROP Position, Var : int ; Positionn, Var3,var4 : int ; EVT Drag {if Position <> Ferm then Position := Ferm} Click {if Position <> Ferm then Position := Ferm ; Position :=true} INITIALISATIONS FenP::Position := True; ACTIONS  { Click (Plan)~ Drag (Plan) }~Click (Plan)");
       String input=new String();
       String tmp;
       FastScanner fastScanner = new FastScanner("/home/moumene/IdeaProjects/Hello/src/input.ihm","ouput.ihm");
       System.out.println("aloha");
       while((tmp=fastScanner.nextLine())!=null){
              input+=" "+tmp;
       }
      Hello hello=new Hello(new StringReader(input));
      //Hello hello=new Hello(in);
      Hello.list=new HashMap();
      ComposantGui cmp;
      Hello.words();


    }
    static HashMap<String,HashMap<String,String>> list ;

}

PARSER_END(Hello)


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MOINS : "-" >
| < MULTIPLICATION : "*" >
| < DEVISION : "/" >
}

TOKEN :
{
  < LETTRE : ["a"-"z","A"-"Z"] >
| < NUMERO : [ "0"-"9" ] >
}





TOKEN :
{
  < SEMICOLON : ";" >
| < OBRACE  : "{" >
| < CBRACE : "}" >
| < OPAR : "(" >
| < CPAR : ")" >
| < COLON: ":">
| < COMMA: ",">
}

TOKEN :
{
  < TYPE :
  "Fenetre"
| "Bouton"
| "BoiteDialog"
| "Panel"
| "ChampsTexte"
| "ComboBox"
| "ListeDeroulante"
| "CaseACocher"
| "BoutonRadio"
| "Icone" >
}

TOKEN :
{
  <BOOLEAN : "Boolean"|"BOOL">
 |<INT:"int">
}




TOKEN :
{
< EvtType :"Click"
  | "Drag"
  | "DbClick"
  | "ChrKeyPress"
  | "NumKeyPress"
  | "EnterKeyPress"
  | "Drop">
}











TOKEN :
{
 <ALTERNATIF : "~">
}

TOKEN :
{
  < IF : "if" >
| < THEN : "then" >
| < DEBUT : "DEBUT">
| < FIN : "FIN" >
| < ACTION : "ACTIONS" >
| < COMP : "COMP" >
| < PROP :"PROP" >
| < EVT : "EVT" >
| <INV : "INV" >
| < INTERFACE : "INTERFACE" >
| < TRUE : "True" >
| < FALSE : "False" >
| < INITIALISATION :"INITIALISATIONS">
| <END:"END">
| <AFFECT:":=">
| <AND:"and">
}


TOKEN :
{
 <NUMERIQUE: (<NUMERO>)+>
 |<ALPHANUMERIQUE: (<NUMERO>|<LETTRE>)+>
}

TOKEN :
{ <EVT_COND:
  "="
  | "<>"
  | ">"
  | "<"
  >
}





void words():
{
   Program program;
   Etat etat0=new Etat();
   Automate automate=new Automate();
}
{
  <DEBUT>
  <INTERFACE>
  program=interfaces()//recupere la partie statique pour la faire passé a l'initialisation;
  <INITIALISATION>
  initialisations(program)
  <ACTION>
  Action_2(etat0,null,automate)
  {automate.afficher();}
  <FIN>
  <EOF>
}
Program interfaces():
{
   HashMap<String,ComposantGui> set_composant_gui=new HashMap();
   ComposantGui composant_tmp;
   Program program;
}
{
(
  composant_tmp=compo()
  {set_composant_gui.put(composant_tmp.getId(),composant_tmp);}
)+
{program = new Program(set_composant_gui);
 //System.out.println(set_composant_gui);
 return program;}
}

void initialisations(Program program):
{}
{
  (init(program)<SEMICOLON>)+


}

void init(Program program):{
String composant_id;
String attribut_id;
ComposantGui composant_gui=null;
Attribut attribut=null;
String val;
}{

composant_id=id()
{
    composant_gui=program.getComposant_Gui(composant_id);
    if(composant_gui==null){
     System.out.println("ERROR!");
    }
}
<COLON><COLON>
attribut_id=id()
{attribut=composant_gui.getAttribut(attribut_id);
   if(attribut==null){
       System.out.println(attribut_id+"ERROR 2!");
   }
}
<AFFECT>
val=attribut_val()
{attribut.updateValue(val);}



}


/*void actions():
{}
{
<OBRACE>
(<EvtType>
<OPAR>
id()
<CPAR>)?
(
(<SEMICOLON>|<PLUS>|<ALTERNATIF>)
(actions()|(<EvtType><OPAR>id()<CPAR>))
)*
<CBRACE>
}*/

Etat Action_2(Etat etat,Etat voisin,Automate automate):
{
    Etat nouv_etat1;
    Etat nouv_etat2;
    Etat tmp;
    String type=null;
    PassString passString=new PassString(type);
    System.out.println("etatenentré"+etat.id);
}
{
   (<OBRACE>
   {System.out.println("ACTION2 recursif");}
   nouv_etat1=Action_2(etat,voisin,automate)
   <CBRACE>nouv_etat2=Action_core_A(etat,nouv_etat1,passString,automate )){
   {
           type=passString.string;
           if(nouv_etat2==null){
                return nouv_etat1;
           }
           System.out.println("TYPE"+type);
           if(type.equals("+")){
                System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
               tmp=new Etat();
               automate.addTransition(nouv_etat1,tmp,"Epsilon");
               automate.addTransition(nouv_etat2,tmp,"Epsilon");
               nouv_etat2=tmp;
               //il faut ajouter les transition aprés !!!
           }
           return nouv_etat2;
       }
   }
   |
   ({System.out.println("ACTION2 non recursif");}
    nouv_etat1=Action_core_B(etat,voisin,automate)
    {System.out.println("Onasortiedeb"+nouv_etat1.id);}
    nouv_etat2=Action_core_A(etat,nouv_etat1,passString,automate)
    {
        type=passString.string;
        System.out.println("whyyyyy"+type);
        if(nouv_etat2==null){
        System.out.println("aloha");
             return nouv_etat1;

        }
        System.out.println("TYPE"+type);
        if(type=="+"){
            System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
            tmp=new Etat();//il faut ajouter les transition aprés !!!
            automate.addTransition(nouv_etat1,tmp,"Epsilon");
            automate.addTransition(nouv_etat2,tmp,"Epsilon");
            nouv_etat2=tmp;
        }
        return nouv_etat2;
    }
   )

}

Etat Action_core_A(Etat etat1,Etat etat2,PassString passString,Automate automate):
{
    Token tmp_type;
    Etat nouveau_etat;
    Etat tmp_etat;

}
{
     ((tmp_type=<SEMICOLON>|(tmp_type=<PLUS>|tmp_type=<ALTERNATIF>))
         {
             passString.string=tmp_type.toString();
             System.out.println("core A non vide"+passString.string);
             if(passString.string.equals("+") ){
                nouveau_etat=Action_2(etat1,null,automate);
             }
             else if(passString.string.equals("~")){
                    nouveau_etat=Action_2(etat1,etat2,automate);
              }else{
                nouveau_etat=Action_2(etat2,null,automate);
              }
              System.out.println("cheking type"+passString.string+"//");
              return nouveau_etat;
         }


        ) |
        ({/*epsilon*/}
        {System.out.println("core A vide");return null;})
}

Etat Action_core_B(Etat etat,Etat voisin/*utilisé dans le cas du choix*/,Automate automate)://le seul ou on a du calcule
{
    Token eventToken;
    String compsant_id;
    System.out.println("B was here");
}
{
    eventToken=<EvtType>
    (<OPAR>
    compsant_id=id()<CPAR>)
    //Action_core_A()
    {
        if(voisin==null){
            Etat nouv_etat=new Etat();
            automate.addTransition(etat,nouv_etat,eventToken.toString());
            return nouv_etat;
        }else{
            automate.addTransition(etat,voisin,eventToken.toString()+"("+compsant_id+")");
            return voisin;
        }
    }

}

void appel_func():{
    Token eventToken;
    String compsant_id;
}{
eventToken=<EvtType>
(<OPAR>
compsant_id=id()<CPAR>)
{

   Etat etat=new Etat();
  /*  String evt=eventToken.toString();
    //System.out.println(compsant_id+"asubit"+evt);
    Program program1=new Program(program);//Nouvelle etat
    program1.AfficherEtat();
    ComposantGui composantGui=program1.getComposant_Gui(compsant_id);
    Evt event=composantGui.getEvt(evt);
    //System.out.println(event.attribut_Cond1);
    composantGui.appliquerEvent(event);
    program1.AfficherEtat();*/
}

}


ComposantGui compo():
{
  String id_compo;
  String  id_parent=null;
  Token type;
  ComposantGui composant_gui;
  HashMap<String,Attribut> tmp_HashMap;
  Evt tmp_evt;


}
{
  <COMP>
  id_compo=id()
  {System.out.println(id_compo);}
  <COLON>
  type=<TYPE>
  (<OPAR>
  id_parent=id()
  <CPAR>)?
  {
    composant_gui=new ComposantGui(id_compo,type.toString(),id_parent);
  }

  <SEMICOLON>

  <PROP>
  (
     tmp_HashMap=prop()
     {composant_gui.add__set_attributs(tmp_HashMap);}

  )+

  (<INV>
    <ALPHANUMERIQUE><EVT_COND>(<TRUE>|<FALSE>)<SEMICOLON>
  )?
  <EVT>
  (
   tmp_evt = evt()
   {composant_gui.add_set_event(tmp_evt);}

  )+
  {return composant_gui;}

}

String attribut_val():
{
    Token tmp;
}{
(tmp=<TRUE>
{return tmp.toString();})
|(tmp=<FALSE>
{return tmp.toString();})
|(tmp=<NUMERO>
{return tmp.toString();})
|(tmp=<NUMERIQUE>
{return tmp.toString();})
|(tmp=<ALPHANUMERIQUE>
{return tmp.toString();})

}


String prop_type()://Poue le moment on ytilise les attributs simple
{
    Token tmp_type;
}
{
 tmp_type=<INT>
 {return tmp_type.toString();}
 |tmp_type=<BOOLEAN>
 {return tmp_type.toString();}
 |(
 <OBRACE>
 <ALPHANUMERIQUE>
 (<COMMA><ALPHANUMERIQUE>)*
 <CBRACE>
 )
}

HashMap prop():
{
    HashMap<String,Attribut> attributs=new HashMap();//Store all the ids of this declaration
    String tmp_id;//Temporare value to store the ids
    String tmp_type;
}
{
 tmp_id=id_prop()
 {
 Attribut tmp_attribut;
 attributs.put(tmp_id,new Attribut(tmp_id));}//Get attributs
 (<COMMA>
 tmp_id=id_prop()
 {
 attributs.put(tmp_id,new Attribut(tmp_id));
 }
 )*
 <COLON>
  tmp_type=prop_type()
  {
     for (Map.Entry<String, Attribut> entry : attributs.entrySet()) {
     		    ((Attribut)entry.getValue()).setType(tmp_type);
     }


  }
 <SEMICOLON>
 {return attributs;}
}

Evt evt():
{
  Token eventType;
  String cond_source;
  String cond_dest;
  Token event_cond;
  HashSet<Affectation> tmp_affectation;
  Evt event;
  Token tmp=null;
  String tmp_val=null;
}
{
 eventType=<EvtType>
 (
  <OPAR>
  tmp=<ALPHANUMERIQUE>
  <CPAR>
 )?
 <OBRACE>
 <IF>
 cond_source=id_prop()
 event_cond=<EVT_COND>
 cond_dest=attribut_val()
 <THEN>
 tmp_affectation=event_result()
 <CBRACE>
 {
    if(tmp!=null)tmp_val=tmp.toString();
    event=new Evt(eventType.toString(),tmp_val,cond_source,cond_dest,event_cond.toString(),tmp_affectation);
    return event;
 }



}

/*void prop_value():
{
}
{
 (< OBRACE >
 attribut_val()
 (","attribut_val())*
 < CBRACE >)
 |attribut_val()
}*/



String id():
{
  Token t;
}
{
 t=<ALPHANUMERIQUE>
 {return t.toString();}

}

String id_prop():
{
 Token t;
}
{
 t=<ALPHANUMERIQUE>((".")<ALPHANUMERIQUE>)?
 {return t.toString();}
}


HashSet<Affectation> event_result():
{
    Affectation affectation;
    String tmp_src;
    String tmp_detination;
    HashSet<Affectation> set_Affectation=new HashSet();
}
{
tmp_detination=id_prop()
 <AFFECT>
 tmp_src=attribut_val()
 {set_Affectation.add(new Affectation(tmp_detination,tmp_src));}
 (
  (<AND>|<SEMICOLON>)
   tmp_detination=id_prop()
   <AFFECT>
   tmp_src=attribut_val()
   {set_Affectation.add(new Affectation(tmp_detination,tmp_src));}
 )*
 {return set_Affectation;}
}

