PARSER_BEGIN(Hello)

import java.io.StringReader;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.Iterator;

public class Hello {
  
    public static void main(String[] args) throws Exception {
      StringReader in=new StringReader("DEBUT INTERFACE COMP FenP : Fenetre ; PROP Position, Var1 : Boolean ; Position2, Var2 : int ; EVT Drag {if Position <> Ferm then Position := Ferm} Click {if Position <> Ferm then Position := Ferm ; Position :=true} COMP FenP : Fenetre (papa) ; PROP Position, Var : int ; Positionn, Var3,var4 : int ; EVT Drag {if Position <> Ferm then Position := Ferm} Click {if Position <> Ferm then Position := Ferm ; Position :=true} INITIALISATIONS FenP::Position := Argd; FenP::Visible := True; ACTIONS { Click(item) + Click(item) ;{Click(item) + Click(item)} }");
      Hello hello=new Hello(in);
      Hello.list=new HashMap();
      ComposantGui cmp;
      Hello.words();


    }
    static HashMap<String,HashMap<String,String>> list ;

}

PARSER_END(Hello)


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MOINS : "-" >
| < MULTIPLICATION : "*" >
| < DEVISION : "/" >
}

TOKEN :
{
  < LETTRE : ["a"-"z","A"-"Z"] >
| < NUMERO : [ "0"-"9" ] >
}





TOKEN :
{
  < SEMICOLON : ";" >
| < OBRACE  : "{" >
| < CBRACE : "}" >
| < OPAR : "(" >
| < CPAR : ")" >
| < COLON: ":">
| < COMMA: ",">
}

TOKEN :
{
  < TYPE :
  "Fenetre"
| "Bouton"
| "BoiteDialog"
| "Panel"
| "ChampsTexte"
| "ComboBox"
| "ListeDeroulante"
| "CaseACocher"
| "BoutonRadio"
| "Icone" >
}

TOKEN :
{
  <BOOLEAN : "Boolean"|"BOOL">
 |<INT:"int">
}




TOKEN :
{
< EvtType :"Click"
  | "Drag"
  | "DbClick"
  | "ChrKeyPress"
  | "NumKeyPress"
  | "EnterKeyPress"
  | "Drop">
}

TOKEN :
{ <EVT_COND:
   "<>"
  | ">"
  | "<"
  | "="
  >
}



TOKEN :
{
 <ALTERNATIF : "~">
}

TOKEN :
{
  < IF : "if" >
| < THEN : "then" >
| < DEBUT : "DEBUT">
| < FIN : "FIN" >
| < ACTION : "ACTIONS" >
| < COMP : "COMP" >
| < PROP :"PROP" >
| < EVT : "EVT" >
| < INTERFACE : "INTERFACE" >
| < TRUE : "True" >
| < FALSE : "False" >
| < INITIALISATION :"INITIALISATIONS">
| <END:"END">
| <AFFECT:":=">
| <AND:"and">
}


TOKEN :
{
 <NUMERIQUE: (<NUMERO>)+>
 |<ALPHANUMERIQUE: (<NUMERO>|<LETTRE>)+>
}





void words():
{
}
{
  <DEBUT>
  <INTERFACE>
  interfaces()
  <INITIALISATION>
  initialisations()
  <ACTION>
  actions()
  //<END>
  <EOF>
}
void interfaces():
{}
{
(
  compo()
)+
}

void initialisations():
{}
{
  (init()<SEMICOLON>)+


}

void init():{
String t;
}{

id()
<COLON><COLON>
id()
<AFFECT>
t=attribut_val()



}


void actions():
{}
{
<OBRACE>
<EvtType>
(<OPAR>
id()
<CPAR>)?
(
(<SEMICOLON>|<PLUS>|<ALTERNATIF>)
((<EvtType><OPAR>id()<CPAR>)|actions())
)*
<CBRACE>
}


void compo():
{
  String id_compo;
  String  id_parent=null;
  Token type;
  ComposantGui composant_gui;
  HashSet<Attribut> tmp_HashSet;
  Evt tmp_evt;

}
{
  <COMP>
  id_compo=id()
  <COLON>
  type=<TYPE>
  (<OPAR>
  id_parent=id()
  <CPAR>)?
  {
    composant_gui=new ComposantGui(id_compo,type.toString(),id_parent);
  }

  <SEMICOLON>
  <PROP>
  (
     tmp_HashSet=prop()
     {composant_gui.add__set_attributs(tmp_HashSet);}

  )+
  {composant_gui.afficherComposantGui();}

  <EVT>
  (
   tmp_evt = evt()
   {composant_gui.add_set_event(tmp_evt);}

  )+

}

String attribut_val():
{
    Token tmp;
}{
(tmp=<TRUE>
{return tmp.toString();})
|(tmp=<FALSE>
{return tmp.toString();})
|(tmp=<NUMERIQUE>
{return tmp.toString();})
|(tmp=<ALPHANUMERIQUE>
{return tmp.toString();})

}


String prop_type()://Poue le moment on ytilise les attributs simple
{
    Token tmp_type;
}
{
 tmp_type=<INT>
 {return tmp_type.toString();}
 |tmp_type=<BOOLEAN>
 {return tmp_type.toString();}
 |(
 <OBRACE>
 <ALPHANUMERIQUE>
 (<COMMA><ALPHANUMERIQUE>)*
 <CBRACE>
 )
}

HashSet prop():
{
    HashSet<Attribut> attributs=new HashSet();//Store all the ids of this declaration
    String tmp_id;//Temporare value to store the ids
    String tmp_type;
}
{
 tmp_id=id_prop()
 {
 Attribut tmp_attribut;
 attributs.add(new Attribut(tmp_id));}//Get attributs
 (<COMMA>
 tmp_id=id_prop()
 {
 attributs.add(new Attribut(tmp_id));
 }
 )*
 <COLON>
  tmp_type=prop_type()
  {
   Iterator iter = attributs.iterator();
   while (iter.hasNext()) {
       ((Attribut)(iter.next())).setType(tmp_type);
   }

   }
 <SEMICOLON>
 {return attributs;}
}

Evt evt():
{
  Token eventType;
  String cond_source;
  String cond_dest;
  Token event_cond;
  HashSet<Affectation> tmp_affectation;
  Evt event;
}
{
 eventType=<EvtType>
 <OBRACE>
 <IF>
 cond_source=id_prop()
 event_cond=<EVT_COND>
 cond_dest=attribut_val()
 <THEN>
 tmp_affectation=event_result()
 <CBRACE>
 {
    event=new Evt(eventType.toString(),cond_source,cond_dest,event_cond.toString(),tmp_affectation);
    return event;
 }



}

void prop_value():
{
}
{
 (< OBRACE >
 attribut_val()
 (","attribut_val())*
 < CBRACE >)
 |attribut_val()
}



String id():
{
  Token t;
}
{
 t=<ALPHANUMERIQUE>
 {return t.toString();}

}

String id_prop():
{
 Token t;
}
{
 t=<ALPHANUMERIQUE>
 {return t.toString();}
}


HashSet<Affectation> event_result():
{
    Affectation affectation;
    String tmp_src;
    String tmp_detination;
    HashSet<Affectation> set_Affectation=new HashSet();
}
{
tmp_detination=id_prop()
 <AFFECT>
 tmp_src=attribut_val()
 {set_Affectation.add(new Affectation(tmp_detination,tmp_src));}
 (
  (<AND>|<SEMICOLON>)
   tmp_detination=id_prop()
   <AFFECT>
   tmp_src=attribut_val()
   {set_Affectation.add(new Affectation(tmp_detination,tmp_src));}
 )*
 {return set_Affectation;}
}

