/* Generated By:JavaCC: Do not edit this line. Hello.java */
import java.io.StringReader;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

public class Hello implements HelloConstants {

    public static void main(String[] args) throws Exception {
      StringReader in=new StringReader("DEBUT INTERFACE COMP FenP : Fenetre ; PROP Position, Var15 : Boolean ; Position2, Var2 : int ; EVT Drag {if Position <> Ferm then Position := Ferm} Click {if Position <> Ferm then Position := Ferm ; Position :=true} COMP FenPP : Fenetre (papa) ; PROP Position, Var : int ; Positionn, Var3,var4 : int ; EVT Drag {if Position <> Ferm then Position := Ferm} Click {if Position <> Ferm then Position := Ferm ; Position :=true} INITIALISATIONS FenP::Position := Argd; ACTIONS { {Click(item) + Click(item)} ;{Click(item) + Click(item)} }");
      Hello hello=new Hello(in);
      Hello.list=new HashMap();
      ComposantGui cmp;
      Hello.words();


    }
    static HashMap<String,HashMap<String,String>> list ;

  static final public void words() throws ParseException {
   Program program;
    jj_consume_token(DEBUT);
    jj_consume_token(INTERFACE);
    program = interfaces();
    jj_consume_token(INITIALISATION);
    initialisations(program);
    jj_consume_token(ACTION);
    Action_2();
    jj_consume_token(0);
  }

  static final public Program interfaces() throws ParseException {
   HashMap<String,ComposantGui> set_composant_gui=new HashMap();
   ComposantGui composant_tmp;
   Program program;
    label_1:
    while (true) {
      composant_tmp = compo();
   set_composant_gui.put(composant_tmp.getId(),composant_tmp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMP:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
 program = new Program(set_composant_gui);
 System.out.println(set_composant_gui);
 {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  static final public void initialisations(Program program) throws ParseException {
    label_2:
    while (true) {
      init(program);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUMERIQUE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void init(Program program) throws ParseException {
String composant_id;
String attribut_id;
ComposantGui composant_gui=null;
Attribut attribut=null;
String val;
    composant_id = id();
    composant_gui=program.getComposant_Gui(composant_id);
    if(composant_gui==null){
     System.out.println("ERROR!");
    }
    jj_consume_token(COLON);
    jj_consume_token(COLON);
    attribut_id = id();
 attribut=composant_gui.getAttribut(attribut_id);
   if(attribut==null){
       System.out.println(attribut_id+"ERROR 2!");
   }
    jj_consume_token(AFFECT);
    val = attribut_val();
 attribut.updateValue(val);
  }

/*void actions():
{}
{
<OBRACE>
(<EvtType>
<OPAR>
id()
<CPAR>)?
(
(<SEMICOLON>|<PLUS>|<ALTERNATIF>)
(actions()|(<EvtType><OPAR>id()<CPAR>))
)*
<CBRACE>
}*/
  static final public void Action_2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBRACE:
      jj_consume_token(OBRACE);
      Action_2();
      jj_consume_token(CBRACE);
      Action_core_A();
      break;
    case EvtType:
      Action_core_B();
      Action_core_A();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Action_core_A() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case SEMICOLON:
    case ALTERNATIF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case PLUS:
      case ALTERNATIF:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case ALTERNATIF:
          jj_consume_token(ALTERNATIF);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Action_2();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public void Action_core_B() throws ParseException {
    jj_consume_token(EvtType);
    jj_consume_token(OPAR);
    id();
    jj_consume_token(CPAR);
    Action_core_A();
  }

  static final public ComposantGui compo() throws ParseException {
  String id_compo;
  String  id_parent=null;
  Token type;
  ComposantGui composant_gui;
  HashMap<String,Attribut> tmp_HashMap;
  Evt tmp_evt;
    jj_consume_token(COMP);
    id_compo = id();
    jj_consume_token(COLON);
    type = jj_consume_token(TYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPAR:
      jj_consume_token(OPAR);
      id_parent = id();
      jj_consume_token(CPAR);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    composant_gui=new ComposantGui(id_compo,type.toString(),id_parent);
    jj_consume_token(SEMICOLON);
    jj_consume_token(PROP);
    label_3:
    while (true) {
      tmp_HashMap = prop();
      composant_gui.add__set_attributs(tmp_HashMap);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHANUMERIQUE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(EVT);
    label_4:
    while (true) {
      tmp_evt = evt();
    composant_gui.add_set_event(tmp_evt);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EvtType:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
   {if (true) return composant_gui;}
    throw new Error("Missing return statement in function");
  }

  static final public String attribut_val() throws ParseException {
    Token tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      tmp = jj_consume_token(TRUE);
 {if (true) return tmp.toString();}
      break;
    case FALSE:
      tmp = jj_consume_token(FALSE);
 {if (true) return tmp.toString();}
      break;
    case NUMERIQUE:
      tmp = jj_consume_token(NUMERIQUE);
 {if (true) return tmp.toString();}
      break;
    case ALPHANUMERIQUE:
      tmp = jj_consume_token(ALPHANUMERIQUE);
 {if (true) return tmp.toString();}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String prop_type() throws ParseException {
    Token tmp_type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      tmp_type = jj_consume_token(INT);
  {if (true) return tmp_type.toString();}
      break;
    case BOOLEAN:
      tmp_type = jj_consume_token(BOOLEAN);
  {if (true) return tmp_type.toString();}
      break;
    case OBRACE:
      jj_consume_token(OBRACE);
      jj_consume_token(ALPHANUMERIQUE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ALPHANUMERIQUE);
      }
      jj_consume_token(CBRACE);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public HashMap prop() throws ParseException {
    HashMap<String,Attribut> attributs=new HashMap();//Store all the ids of this declaration
    String tmp_id;//Temporare value to store the ids
    String tmp_type;
    tmp_id = id_prop();
 Attribut tmp_attribut;
 attributs.put(tmp_id,new Attribut(tmp_id));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      tmp_id = id_prop();
 attributs.put(tmp_id,new Attribut(tmp_id));
    }
    jj_consume_token(COLON);
    tmp_type = prop_type();
     for (Map.Entry<String, Attribut> entry : attributs.entrySet()) {
                    ((Attribut)entry.getValue()).setType(tmp_type);
     }
    jj_consume_token(SEMICOLON);
  {if (true) return attributs;}
    throw new Error("Missing return statement in function");
  }

  static final public Evt evt() throws ParseException {
  Token eventType;
  String cond_source;
  String cond_dest;
  Token event_cond;
  HashSet<Affectation> tmp_affectation;
  Evt event;
  Token tmp=null;
  String tmp_val=null;
    eventType = jj_consume_token(EvtType);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPAR:
      jj_consume_token(OPAR);
      tmp = jj_consume_token(ALPHANUMERIQUE);
      jj_consume_token(CPAR);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(OBRACE);
    jj_consume_token(IF);
    cond_source = id_prop();
    event_cond = jj_consume_token(EVT_COND);
    cond_dest = attribut_val();
    jj_consume_token(THEN);
    tmp_affectation = event_result();
    jj_consume_token(CBRACE);
    if(tmp!=null)tmp_val=tmp.toString();
    event=new Evt(eventType.toString(),tmp_val,cond_source,cond_dest,event_cond.toString(),tmp_affectation);
    {if (true) return event;}
    throw new Error("Missing return statement in function");
  }

  static final public void prop_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBRACE:
      jj_consume_token(OBRACE);
      attribut_val();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        attribut_val();
      }
      jj_consume_token(CBRACE);
      break;
    case TRUE:
    case FALSE:
    case NUMERIQUE:
    case ALPHANUMERIQUE:
      attribut_val();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String id() throws ParseException {
  Token t;
    t = jj_consume_token(ALPHANUMERIQUE);
  {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String id_prop() throws ParseException {
 Token t;
    t = jj_consume_token(ALPHANUMERIQUE);
  {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public HashSet<Affectation> event_result() throws ParseException {
    Affectation affectation;
    String tmp_src;
    String tmp_detination;
    HashSet<Affectation> set_Affectation=new HashSet();
    tmp_detination = id_prop();
    jj_consume_token(AFFECT);
    tmp_src = attribut_val();
  set_Affectation.add(new Affectation(tmp_detination,tmp_src));
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
      case AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp_detination = id_prop();
      jj_consume_token(AFFECT);
      tmp_src = attribut_val();
    set_Affectation.add(new Affectation(tmp_detination,tmp_src));
    }
  {if (true) return set_Affectation;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HelloTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x0,0x201000,0x800020,0x800820,0x800820,0x4000,0x0,0x200000,0x0,0x20000,0x181000,0x20000,0x4000,0x20000,0x1000,0x800,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x186,0x0,0x0,0x0,0x0,0x0,0x186,0x40,0x40,};
   }

  /** Constructor with InputStream. */
  public Hello(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Hello(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HelloTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Hello(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HelloTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Hello(HelloTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HelloTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
